
// Created by mousymous started at March 9 Finished at March 10

#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <string.h>

#define PORT 1000

struct Var{

  int client_socket;

};

// Function for Configuring the address of the server where it's going to connect to, Parameter is Pointer to struct sockaddr_in
void _conf_address(struct sockaddr_in * address){
  address -> sin_family = AF_INET;                      // Specifies that it will use IPv4 address
  address -> sin_port = htons(PORT);                    // port for connecting to server
  address -> sin_addr.s_addr = inet_addr("127.0.0.1");  // IP address of the server it's ging to connect to
}

// Function for Creating the socket
void _create_socket(struct Var * var){

  // Loops until it connects to the server
  while ( connect(var -> client_socket, (struct sockaddr*)&*address, sizeof(*address)) < 0){
    fprintf(stderr, "Seeking Connection...\n");
  }

  // Connection to server is success, return control to main function
  fprintf(stdout, "\n\nConnection Established...\n\n");
  return 0;
}

// Function for recieving messages from server
void _receiv_commands(struct Var * var, struct sockaddr_in * address){

  char buffer[1024]; // where to store the received packet/messages from the server

  while(1){
    
    recv(var -> client_socket, buffer, sizeof(buffer), 0); // receives the message from server
    printf("%s", buffer);                                  // print the message out

  }
}

int main(int argv, char * argc[]){
  struct Var var;
  struct sockaddr_in address;

  // Calls each functions by order

  _conf_address(&address);
  _create_socket(&var);
  _connect_server(&var, &address);
  _receiv_commands(&var, &address);

  // close the client_socket afterwards for closing connection from the server
  close(var.client_socket);
  return 0;
}
